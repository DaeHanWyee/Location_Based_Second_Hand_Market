package com.ajou.secure.board;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.ajou.secure.common.RequestParameter;
import com.ajou.secure.common.Utils;

@Controller
public class BoardController {
	
	@Resource(name = "boardService")
	private BoardServiceImpl boardService;
	
		
	@RequestMapping("/board/board_write.do")
	public ModelAndView boardWrite(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> boardMap = new HashMap<String, Object>();
		
		Board board = new Board();
		
		board.setBoardContents(rp.get("boardContents").toString());
		board.setBoardPassword(rp.get("boardPassword").toString());
		board.setBoardSubject(rp.get("boardSubject").toString());
		board.setBoardType(rp.get("boardType").toString());
		board.setBoardWriter(rp.get("boardWriter").toString());
		
		
		int ret = this.boardService.saveCheck(board);
		
		System.out.println("ret = "+ ret);
		
		
		if(ret > 0){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용
			
			boardService.updateUserBoardCount(rp.get("boardWriter").toString());

			map.put("success", "success");
		}else{
			map.put("fail", "로그인 실패");
		}
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	
	@RequestMapping("/board/board_list.do")
	public ModelAndView boardList(HttpServletRequest req, HttpServletResponse res, HashMap ret) throws Exception {
		System.out.println("ret = "+ ret);
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> boardMap = new HashMap<String, Object>();
		
		Map<String, Integer> param = new HashMap<String, Integer>();
		param.put("start", Integer.parseInt(rp.get("start").toString()));
		param.put("end", Integer.parseInt(rp.get("end").toString()));
		
		ArrayList<Board> boardList = (ArrayList<Board>) this.boardService.getList(param);
		
		
		
		if(boardList != null){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용

			map.put("success", boardList);
		}else{
			map.put("fail", "로그인 실패");
		}
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	
	@RequestMapping("/board/board_view.do")
	public ModelAndView boardView(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Board board = (Board) this.boardService.getObject(rp);
		
		System.out.println("board.getBoardWriter() = "+ board.getBoardWriter());
		System.out.println("rp.get(boardWriter).toString() = "+ rp.get("boardWriter").toString());
		
		if(!board.getBoardWriter().equals(rp.get("boardWriter").toString())){
			this.boardService.inscreaseHits(rp);
		}
		
		
		if(board != null){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용

			map.put("success", board);
		}else{
			map.put("fail", "로그인 실패");
		}
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_update.do")
	public ModelAndView boardUpdate(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> boardMap = new HashMap<String, Object>();
		
		Board board = new Board();
		
		board.setBoardContents(rp.get("boardContents").toString());
		board.setBoardPassword(rp.get("boardPassword").toString());
		board.setBoardSubject(rp.get("boardSubject").toString());
		board.setBoardType(rp.get("boardType").toString());
		board.setBoardNumSeq(Integer.parseInt(rp.get("boardNumSeq").toString()));
		
		int ret = this.boardService.updateCheck(board);
		
		System.out.println("ret = "+ ret);
		
		
		if(ret > 0){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용

			map.put("success", boardMap);
		}else{
			map.put("fail", "로그인 실패");
		}
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_remove.do")
	public ModelAndView boardRemove(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();

		this.boardService.removeAllComment(rp);
		this.boardService.remove(rp);
		boardService.updateUserBoardCountFall(rp.get("boardWriter").toString());
		
	//	rp.put("boardRootUpper", rp.get("boardSeqNum").toString());

		map.put("success", "success");
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}

	
	@RequestMapping("/board/board_comment_write.do")
	public ModelAndView boardCommentWrite(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Board board = new Board();
		
		board.setBoardContents(rp.get("boardContents").toString());
		board.setBoardSubject("comment");
		board.setBoardPassword("comment");
		board.setBoardType("1");
		board.setBoardWriter(rp.get("boardWriter").toString());
		board.setBoardStep(Integer.parseInt(rp.get("boardStep").toString()));
		board.setBoardUpper(Integer.parseInt(rp.get("boardUpper").toString()));
		board.setBoardRootUpper(Integer.parseInt(rp.get("boardRootUpper").toString()));
		

		int ret = this.boardService.saveCheckComment(board);
		
		System.out.println("ret = "+ ret);
		
		
		if(ret > 0){
			map.put("success", "success");
		}else{
			map.put("fail", "로그인 실패");
		}
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		//System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_comment_list.do")
	public ModelAndView boardCommentList(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> boardMap = new HashMap<String, Object>();
		
		String boardUpper = rp.get("boardUpper").toString();
		ArrayList<Board> boardList = (ArrayList<Board>) this.boardService.getCommentList(boardUpper);
		
		if(boardList != null){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용

			map.put("success", boardList);
		}else{
			map.put("fail", "로그인 실패");
		}
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_comment_remove.do")
	public ModelAndView boardCommentRemove(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> boardMap = new HashMap<String, Object>();
		
		int step = Integer.parseInt(rp.get("step").toString());
		
		System.out.println("step = "+ step);
		
		if(step == 2)
			this.boardService.remove(rp);
		else if(step == 1){
			Board board = (Board) this.boardService.getObject(rp);
			System.out.println("STEP1. boardNumSeq = "+ board.getBoardNumSeq());
			rp.put("boardUpperSeq", board.getBoardNumSeq());
			this.boardService.removeStep1(rp);
			System.out.println("STEP2=======================================================.");
			
			this.boardService.remove(rp);
			System.out.println("STEP3==============================================================.");
		}
		

		map.put("success", "success");
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_count.do")
	public ModelAndView boardCount(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Object> map = new HashMap<String, Object>();
		int count = this.boardService.getBoardCount(rp);
		
		System.out.println("count = "+ count);
		
		if(count > 0)
			map.put("success", count);
		else
			map.put("fail", 1);
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_comment_number.do")
	public ModelAndView boardCommentNumber(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		
		Map<String, Integer> param = new HashMap<String, Integer>();
		param.put("start", Integer.parseInt(rp.get("start").toString()));
		param.put("end", Integer.parseInt(rp.get("end").toString()));
		
				
		ArrayList<Board> boardList = (ArrayList<Board>) this.boardService.getBoardCommentNumber(param);
		
		Map<String, Object> map = new HashMap<String, Object>();

		
		if(boardList != null){
			/*
			userMap.put("userSeq", user.getUserNumSeq());
			userMap.put("userEmail", user.getUserEmail1());
			userMap.put("userName", user.getUserName());
			*/
			
			//세션처리 - html5 sessionStorage 이용

			map.put("success", boardList);
		}else{
			map.put("fail", "로그인 실패");
		}
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
	
	@RequestMapping("/board/board_recommand.do")
	public ModelAndView boardRecommand(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);	
		ModelAndView mnv = new ModelAndView("/common/json_result");
		 
		System.out.println("rp = "+ rp);
		Map<String, Object> map = new HashMap<String, Object>();
		
		boardService.setRecommand(rp);

		map.put("success", "success");
		
		mnv.addObject("map", map);
		mnv.addObject("callback", req.getParameter("callback"));
		
		System.out.println("mnv = "+ mnv);
		return mnv;
	}
}
