package com.ajou.secure.attachfile;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ajou.secure.common.FileDownloadUtil;
import com.ajou.secure.common.FileUploadUtil;
import com.ajou.secure.common.RequestParameter;
import com.ajou.secure.common.Utils;


@Controller
public class AttachFileController {
	private String realPath = "C:/secure/files/";

	@Resource(name = "attachFileService")
	private AttachFileServiceImpl attachFileService;
	
	
	@RequestMapping("/attachfile/file_upload.do")
	public ModelAndView fileUpload(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mnv = new ModelAndView("/common/json_result");
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) req;
		
		System.out.println("req="+req);
		
		List<MultipartFile> files = multipartRequest.getFiles("uploads");
		int carSeq = Integer.parseInt(req.getParameter("sellCarSeq").toString());
		
		for (int i = 0; i < files.size(); i++) {
			if(!files.get(i).isEmpty()){
				String tempName = FileUploadUtil.getTempName();
				 
				File objDir = new File(realPath + carSeq);
				if(!(objDir.exists() && objDir.isDirectory())){
					objDir.mkdirs();
				}
				files.get(i).transferTo(new File(realPath + carSeq + "/" + tempName));
				
				AttachFile attachFile = new AttachFile();
				attachFile.setAttachSellSeq(carSeq);
				attachFile.setAttachFileName(files.get(i).getOriginalFilename());
				attachFile.setAttachTempName(tempName);
				attachFile.setAttachContentType(files.get(i).getContentType());
				attachFile.setAttachFileUrl(realPath + carSeq + "/" + tempName);
				
				attachFileService.save(attachFile);
			}
       }
		
		return mnv;
	}
	

	@RequestMapping("/attachfile/file_download.do")
	public ModelAndView fileDownload(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);
		AttachFile attachfile = (AttachFile) attachFileService.getObjectBySeq(rp);
		FileDownloadUtil.outputFile(attachfile, req, res, realPath + attachfile.getAttachSellSeq() + "/");
		
		return null;
	}
	
	@RequestMapping("/attachfile/mainfile_download.do")
	public ModelAndView mainfileDownload(HttpServletRequest req, HttpServletResponse res) throws Exception {
		RequestParameter rp = Utils.extractRequestParameters(req);
		AttachFile attachfile = (AttachFile) attachFileService.getObjectBySellSeq(Integer.parseInt((String)rp.get("attachSellSeq")));
		FileDownloadUtil.outputFile(attachfile, req, res, realPath + attachfile.getAttachSellSeq() + "/");
		
		return null;
	}
	
	@RequestMapping("/attachfile/file_delete.do")
	public ModelAndView fileDelete(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mnv = new ModelAndView("/common/json_result");
		RequestParameter rp = Utils.extractRequestParameters(req);
		
		AttachFile attachFile = attachFileService.getObjectBySeq(rp);
		
		System.out.println(attachFile.getAttachFileUrl());
		File file = new File(attachFile.getAttachFileUrl());
		if (file.delete()) {
	    	attachFileService.delete(rp);	//db 삭제
	    	mnv.addObject("1", "파일 삭제");
	    } else {
	    	mnv.addObject("-1", "파일 삭제 실패");
	    }
	    mnv.addObject("callback", req.getParameter("callback"));
		return mnv;
		
//		attachFileService.delete(rp);
/*		
		
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) req;
		
		List<MultipartFile> files = multipartRequest.getFiles("uploads");
		int carSeq = Integer.parseInt(req.getParameter("sellCarSeq").toString());
		
		for (int i = 0; i < files.size(); i++) {
			if(!files.get(i).isEmpty()){
				String tempName = FileUploadUtil.getTempName();
				 
				File objDir = new File(realPath + carSeq);
				if(!(objDir.exists() && objDir.isDirectory())){
					objDir.mkdirs();
				}
				files.get(i).transferTo(new File(realPath + carSeq + "/" + tempName));
				
				AttachFile attachFile = new AttachFile();
				attachFile.setAttachSellSeq(carSeq);
				attachFile.setAttachFileName(files.get(i).getOriginalFilename());
				attachFile.setAttachTempName(tempName);
				attachFile.setAttachContentType(files.get(i).getContentType());
				attachFile.setAttachFileUrl(realPath + carSeq + "/" + tempName);
				
				attachFileService.save(attachFile);
			}
       }
*/		
	}

}
